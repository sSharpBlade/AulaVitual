/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package IGU.Docente;

import Logica.ArchivosPDF.PDF;
import Logica.ArchivosPDF.TareasPDF;
import Logica.Modelo.IdUsuario;
import Logica.Modelo.Usuario;
import Logica.Usuarios.Acciones.Docente;
import Logica.Usuarios.Administradores;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Edwin Lopez
 */
public class pCalificar extends javax.swing.JPanel {

    /**
     * Creates new form pCalificar
     */
    private IdUsuario idu = Usuario.idU;
    private PDF pdf = new PDF();
    private TareasPDF tarea = new TareasPDF();
    private Docente doc = new Docente();
    private Administradores admin = new Administradores();
    private DefaultListModel modelo1 = new DefaultListModel();

    public pCalificar() {
        initComponents();
        this.lista();
        this.tabla();
    }

    private void lista() {
        ltAsignaturas.setModel(modelo1);
        modelo1.removeAllElements();

        for (int i = 0; i < doc.getAsignaturas(this.idu.getId()).size(); i++) {
            modelo1.addElement(doc.getAsignaturas(this.idu.getId()).get(i));
        }

    }

    private void tabla() {
        String n = ltAsignaturas.getSelectedValue();
        this.admin.setId("asignaturas", n);
        String valor = "";
        if (!btnCalificados.isEnabled()) {
            valor = "NOT";
        }
        pdf.tablaTareas(tbTareas, this.admin.getId(), idu.getId(), valor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbTareas = new javax.swing.JTable();
        txtNota = new javax.swing.JTextField();
        btnNota = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ltAsignaturas = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        btnCalificados = new javax.swing.JButton();
        btnPendiente = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(772, 546));

        tbTareas = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        tbTareas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbTareas.getTableHeader().setResizingAllowed(false);
        tbTareas.getTableHeader().setReorderingAllowed(false);
        tbTareas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbTareasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbTareas);

        txtNota.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNota.setEnabled(false);
        txtNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNotaActionPerformed(evt);
            }
        });
        txtNota.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNotaKeyTyped(evt);
            }
        });

        btnNota.setText("Asignar Nota");
        btnNota.setEnabled(false);
        btnNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotaActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SELECCIONAR LA TAREA PARA CALIFICAR");

        ltAsignaturas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ltAsignaturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ltAsignaturasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ltAsignaturas);

        jLabel2.setText("Seleccione una asignatura");

        btnCalificados.setText("Calificados");
        btnCalificados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalificadosActionPerformed(evt);
            }
        });

        btnPendiente.setText("Pendientes");
        btnPendiente.setEnabled(false);
        btnPendiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPendienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPendiente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCalificados))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNota)
                            .addComponent(btnNota))))
                .addGap(38, 61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPendiente)
                        .addComponent(btnCalificados))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNota))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalificadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalificadosActionPerformed
        btnCalificados.setEnabled(false);
        btnPendiente.setEnabled(true);
        this.tabla();
    }//GEN-LAST:event_btnCalificadosActionPerformed

    private void btnPendienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPendienteActionPerformed
        btnPendiente.setEnabled(false);
        btnCalificados.setEnabled(true);
        this.tabla();
    }//GEN-LAST:event_btnPendienteActionPerformed

    private void btnNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotaActionPerformed
        if (txtNota.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor digite un valor");
        } else {
            int contador = 0;
            for (int i = 0; i < txtNota.getText().length(); i++) {
                if (txtNota.getText().charAt(i) == '.') {
                    contador++;
                }
            }
            if (contador == 1 || contador == 0) {
                Double nota = Double.valueOf(txtNota.getText());
                int fila = tbTareas.getSelectedRow();
                if (nota > 10.00 || nota < 1.00) {
                    JOptionPane.showMessageDialog(null, "La calificacion no debe ser mayor que 10 \nni menor a 0.00");
                } else {
                    doc.calificarTarea(tbTareas.getValueAt(fila, 4).toString(), nota);
                    btnNota.setEnabled(false);
                    txtNota.setEnabled(false);
                    txtNota.setText("");
                    this.tabla();
                }
            } else {
                JOptionPane.showMessageDialog(null, "La nota que intenta tiene mas de un punto");
            }
        }
    }//GEN-LAST:event_btnNotaActionPerformed

    private void ltAsignaturasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ltAsignaturasMouseClicked
        if (!doc.getAsignaturas(this.idu.getId()).isEmpty()) {
            this.tabla();
            btnNota.setEnabled(false);
            txtNota.setEnabled(false);
        }
    }//GEN-LAST:event_ltAsignaturasMouseClicked

    private void tbTareasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbTareasMouseClicked
        btnNota.setEnabled(true);
        txtNota.setEnabled(true);
        int fila = tbTareas.getSelectedRow();
        int column = tbTareas.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = evt.getY() / tbTareas.getRowHeight();
        if (row < tbTareas.getRowCount() && row >= 0 && column < tbTareas.getColumnCount() && column >= 0) {
            Object value = tbTareas.getValueAt(row, column);
            if (value instanceof JButton) {
                ((JButton) value).doClick();
                JButton boton = (JButton) value;

                if (boton.getText().equals("Vacio")) {
                    JOptionPane.showMessageDialog(null, "No hay archivo");
                } else {
                    PDF pd = new PDF();
                    pd.abrirArchivoTarea(tbTareas.getValueAt(fila, 4).toString());
                    try {
                        Desktop.getDesktop().open(new File("new.pdf"));
                    } catch (Exception ex) {
                    }
                }

            }
        }
    }//GEN-LAST:event_tbTareasMouseClicked

    private void txtNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNotaActionPerformed

    }//GEN-LAST:event_txtNotaActionPerformed

    private void txtNotaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNotaKeyTyped
        char validar = evt.getKeyChar();
        if (!Character.isDigit(validar) && validar != '.') {
            evt.consume();
        }
        if (txtNota.getText().length() > 3) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNotaKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalificados;
    private javax.swing.JButton btnNota;
    private javax.swing.JButton btnPendiente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> ltAsignaturas;
    private javax.swing.JTable tbTareas;
    private javax.swing.JTextField txtNota;
    // End of variables declaration//GEN-END:variables
}
